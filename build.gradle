buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.palantir:jacoco-coverage:0.4.0'
  }
}

plugins {
  id "com.jfrog.bintray" version "1.7.1"
}

allprojects {
  repositories {
    jcenter()
  }
  apply plugin: 'maven'
  apply plugin: 'maven-publish'
  apply plugin: 'java'
  apply plugin: 'com.palantir.jacoco-coverage'
}

group = 'com.github.klousiaj'
version = '1.3.0'
description = 'A junit rule to run docker containers.'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  mavenCentral()
}

dependencies {
  compile 'org.slf4j:slf4j-api:1.7.12'
  compile 'com.spotify:docker-client:5.0.2:shaded'
  compile('junit:junit:4.12') { ext.optional = true }
  compile 'com.google.guava:guava:18.0'
  testCompile 'org.slf4j:slf4j-simple:1.7.12'
  testCompile 'com.rabbitmq:amqp-client:3.2.1'
  testCompile 'com.palantir:jacoco-coverage:0.4.0'
  testCompile 'org.mockito:mockito-core:2.0.91-beta'
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar, javadocJar
}

jacocoCoverage {
  // Enforce minimum code coverage of 50% for every Java file.
  fileThreshold 0.5

  // Whitelist files named MyClass.java from coverage requirements.
  // fileThreshold 0.0, "MyClass.java"
}

jacocoTestReport {
  reports {
    xml.enabled false
    csv.enabled false
    html.destination "${buildDir}/jacocoHtml"
  }
}

publishing {
  publications {
    JarPublication(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      pom.withXml {
        def depMap = configurations.compile.dependencies.collectEntries { [it.name, it] }
        asNode().dependencies.dependency.findAll {
          def dep = depMap.get(it.artifactId.text())
          return dep?.hasProperty('optional') && dep.optional
        }.each {
          if (it.optional) {
            it.optional.value = 'true'
          } else {
            it.appendNode('optional', 'true')
          }
        }
      }
    }
  }
}

def bintrayUser = project.hasProperty('bintrayUser') ? project.bintrayUser : System.getenv('BINTRAY_USER')
def bintrayKey = project.hasProperty('bintrayKey') ? project.bintrayKey : System.getenv('BINTRAY_KEY')

bintray {
  user = bintrayUser
  key = bintrayKey
  publications = ['JarPublication']
  publish = true
  override = true
  pkg {
    repo = 'maven'
    name = project.name
    desc = project.description
    licenses = ['MIT']
    vcsUrl = 'https://github.com/klousiaj/docker-junit-rule.git'
    version {
      name = project.version
      desc = project.description
    }
  }
}
